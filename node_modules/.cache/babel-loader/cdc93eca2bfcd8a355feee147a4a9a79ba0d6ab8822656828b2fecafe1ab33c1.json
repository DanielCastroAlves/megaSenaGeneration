{"ast":null,"code":"var _jsxFileName = \"/home/daniel/megaSenaGeneration/megasena-generation/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MegaSenaGenerator = () => {\n  _s();\n  const [numbers, setNumbers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const response = await fetch(\"https://api.estatisticasdamegasena.com/numbers\");\n      const data = await response.json();\n      setNumbers(data.numbers);\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n  const generateNumbers = () => {\n    let newNumbers = [];\n    while (newNumbers.length < 6) {\n      let randomNumber = Math.floor(Math.random() * 60) + 1;\n      if (!newNumbers.includes(randomNumber)) {\n        newNumbers.push(randomNumber);\n      }\n    }\n    setNumbers(newNumbers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mega-sena-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Gerador de N\\xFAmeros da Mega-Sena\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"generate-button\",\n      onClick: generateNumbers,\n      children: \"Gerar N\\xFAmeros\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading\",\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"numbers-list\",\n      children: numbers.map((number, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"number-item\",\n        children: number\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(MegaSenaGenerator, \"PLabd3oT0faofI0PRfjJA3qTRAo=\");\n_c = MegaSenaGenerator;\nexport default MegaSenaGenerator;\nvar _c;\n$RefreshReg$(_c, \"MegaSenaGenerator\");","map":{"version":3,"names":["React","useState","useEffect","MegaSenaGenerator","numbers","setNumbers","loading","setLoading","fetchData","response","fetch","data","json","generateNumbers","newNumbers","length","randomNumber","Math","floor","random","includes","push","map","number","index"],"sources":["/home/daniel/megaSenaGeneration/megasena-generation/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst MegaSenaGenerator = () => {\n  const [numbers, setNumbers] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const response = await fetch(\"https://api.estatisticasdamegasena.com/numbers\");\n      const data = await response.json();\n      setNumbers(data.numbers);\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  const generateNumbers = () => {\n    let newNumbers = [];\n    while (newNumbers.length < 6) {\n      let randomNumber = Math.floor(Math.random() * 60) + 1;\n      if (!newNumbers.includes(randomNumber)) {\n        newNumbers.push(randomNumber);\n      }\n    }\n    setNumbers(newNumbers);\n  };\n\n  return (\n    <div className=\"mega-sena-container\">\n      <h1 className=\"title\">Gerador de Números da Mega-Sena</h1>\n      <button className=\"generate-button\" onClick={generateNumbers}>\n        Gerar Números\n      </button>\n      {loading ? (\n        <p className=\"loading\">Carregando...</p>\n      ) : (\n        <ul className=\"numbers-list\">\n          {numbers.map((number, index) => (\n            <li key={index} className=\"number-item\">\n              {number}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default MegaSenaGenerator;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC;AAEnB,MAAMC,iBAAiB,GAAG,MAAM;EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd,MAAMM,SAAS,GAAG,YAAY;MAC5BD,UAAU,CAAC,IAAI,CAAC;MAChB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,CAAC;MAC9E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClCP,UAAU,CAACM,IAAI,CAACP,OAAO,CAAC;MACxBG,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IACDC,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,eAAe,GAAG,MAAM;IAC5B,IAAIC,UAAU,GAAG,EAAE;IACnB,OAAOA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAIC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;MACrD,IAAI,CAACL,UAAU,CAACM,QAAQ,CAACJ,YAAY,CAAC,EAAE;QACtCF,UAAU,CAACO,IAAI,CAACL,YAAY,CAAC;MAC/B;IACF;IACAX,UAAU,CAACS,UAAU,CAAC;EACxB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,qBAAqB;IAAA,wBAClC;MAAI,SAAS,EAAC,OAAO;MAAA,UAAC;IAA+B;MAAA;MAAA;MAAA;IAAA,QAAK,eAC1D;MAAQ,SAAS,EAAC,iBAAiB;MAAC,OAAO,EAAED,eAAgB;MAAA,UAAC;IAE9D;MAAA;MAAA;MAAA;IAAA,QAAS,EACRP,OAAO,gBACN;MAAG,SAAS,EAAC,SAAS;MAAA,UAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAI,gBAExC;MAAI,SAAS,EAAC,cAAc;MAAA,UACzBF,OAAO,CAACkB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzB;QAAgB,SAAS,EAAC,aAAa;QAAA,UACpCD;MAAM,GADAC,KAAK;QAAA;QAAA;QAAA;MAAA,QAGf;IAAC;MAAA;MAAA;MAAA;IAAA,QAEL;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;AAEV,CAAC;AAAC,GA7CIrB,iBAAiB;AAAA,KAAjBA,iBAAiB;AA+CvB,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}