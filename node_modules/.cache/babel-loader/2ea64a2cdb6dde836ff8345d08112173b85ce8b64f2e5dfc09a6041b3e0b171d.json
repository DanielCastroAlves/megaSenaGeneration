{"ast":null,"code":"var _jsxFileName = \"/home/daniel/megaSenaGeneration/megasena-generation/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [numbers, setNumbers] = useState([]);\n  const [quantityGames, setQuantityGames] = useState(1);\n  const [quantityNumbers, setQuantityNumbers] = useState(6);\n  const generateNumbers = () => {\n    let generatedNumbers = [];\n    let allGeneratedNumbers = [];\n    for (let i = 0; i < quantityGames; i++) {\n      while (generatedNumbers.length < quantityNumbers) {\n        let randomNumber = Math.floor(Math.random() * 60) + 1;\n        if (!generatedNumbers.includes(randomNumber)) {\n          generatedNumbers.push(randomNumber);\n        }\n      }\n      allGeneratedNumbers.push(generatedNumbers.sort((a, b) => a - b));\n      generatedNumbers = [];\n    }\n    setNumbers(allGeneratedNumbers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gerador de n\\xFAmeros para Mega-Sena\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Quantidade de jogos:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: quantityGames,\n          min: \"1\",\n          max: \"15\",\n          onChange: e => setQuantityGames(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Quantidade de n\\xFAmeros por jogo:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: quantityNumbers,\n          min: \"6\",\n          max: \"15\",\n          onChange: e => setQuantityNumbers(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateNumbers,\n      children: \"Gerar n\\xFAmeros\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"numbers\",\n      children: numbers.map((numberArray, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Jogo \", index + 1, \":\", numberArray.map(number => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: number\n        }, number, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"B3XSzuvHaWJ+xDvS3hXo79E8oJk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","numbers","setNumbers","quantityGames","setQuantityGames","quantityNumbers","setQuantityNumbers","generateNumbers","generatedNumbers","allGeneratedNumbers","i","length","randomNumber","Math","floor","random","includes","push","sort","a","b","e","target","value","map","numberArray","index","number"],"sources":["/home/daniel/megaSenaGeneration/megasena-generation/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst App = () => {\n  const [numbers, setNumbers] = useState([]);\n  const [quantityGames, setQuantityGames] = useState(1);\n  const [quantityNumbers, setQuantityNumbers] = useState(6);\n\n  const generateNumbers = () => {\n    let generatedNumbers = [];\n    let allGeneratedNumbers = [];\n\n    for (let i = 0; i < quantityGames; i++) {\n      while (generatedNumbers.length < quantityNumbers) {\n        let randomNumber = Math.floor(Math.random() * 60) + 1;\n        if (!generatedNumbers.includes(randomNumber)) {\n          generatedNumbers.push(randomNumber);\n        }\n      }\n      allGeneratedNumbers.push(generatedNumbers.sort((a, b) => a - b));\n      generatedNumbers = [];\n    }\n    setNumbers(allGeneratedNumbers);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Gerador de números para Mega-Sena</h1>\n      <div className=\"form\">\n        <label>\n          Quantidade de jogos:\n          <input\n            type=\"number\"\n            value={quantityGames}\n            min=\"1\"\n            max=\"15\"\n            onChange={(e) => setQuantityGames(e.target.value)}\n          />\n        </label>\n        <label>\n          Quantidade de números por jogo:\n          <input\n            type=\"number\"\n            value={quantityNumbers}\n            min=\"6\"\n            max=\"15\"\n            onChange={(e) => setQuantityNumbers(e.target.value)}\n          />\n        </label>\n      </div>\n      <button onClick={generateNumbers}>Gerar números</button>\n      <div className=\"numbers\">\n        {numbers.map((numberArray, index) => (\n          <div key={index}>\n            Jogo {index + 1}:\n            {numberArray.map((number) => (\n              <span key={number}>{number}</span>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACI,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACM,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAEzD,MAAMQ,eAAe,GAAG,MAAM;IAC5B,IAAIC,gBAAgB,GAAG,EAAE;IACzB,IAAIC,mBAAmB,GAAG,EAAE;IAE5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,aAAa,EAAEO,CAAC,EAAE,EAAE;MACtC,OAAOF,gBAAgB,CAACG,MAAM,GAAGN,eAAe,EAAE;QAChD,IAAIO,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;QACrD,IAAI,CAACP,gBAAgB,CAACQ,QAAQ,CAACJ,YAAY,CAAC,EAAE;UAC5CJ,gBAAgB,CAACS,IAAI,CAACL,YAAY,CAAC;QACrC;MACF;MACAH,mBAAmB,CAACQ,IAAI,CAACT,gBAAgB,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CAAC;MAChEZ,gBAAgB,GAAG,EAAE;IACvB;IACAN,UAAU,CAACO,mBAAmB,CAAC;EACjC,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,wBACxB;MAAA,UAAI;IAAiC;MAAA;MAAA;MAAA;IAAA,QAAK,eAC1C;MAAK,SAAS,EAAC,MAAM;MAAA,wBACnB;QAAA,WAAO,sBAEL;UACE,IAAI,EAAC,QAAQ;UACb,KAAK,EAAEN,aAAc;UACrB,GAAG,EAAC,GAAG;UACP,GAAG,EAAC,IAAI;UACR,QAAQ,EAAGkB,CAAC,IAAKjB,gBAAgB,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK;QAAE;UAAA;UAAA;UAAA;QAAA,QAClD;MAAA;QAAA;QAAA;QAAA;MAAA,QACI,eACR;QAAA,WAAO,oCAEL;UACE,IAAI,EAAC,QAAQ;UACb,KAAK,EAAElB,eAAgB;UACvB,GAAG,EAAC,GAAG;UACP,GAAG,EAAC,IAAI;UACR,QAAQ,EAAGgB,CAAC,IAAKf,kBAAkB,CAACe,CAAC,CAACC,MAAM,CAACC,KAAK;QAAE;UAAA;UAAA;UAAA;QAAA,QACpD;MAAA;QAAA;QAAA;QAAA;MAAA,QACI;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ,eACN;MAAQ,OAAO,EAAEhB,eAAgB;MAAA,UAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAS,eACxD;MAAK,SAAS,EAAC,SAAS;MAAA,UACrBN,OAAO,CAACuB,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBAC9B;QAAA,WAAiB,OACV,EAACA,KAAK,GAAG,CAAC,EAAC,GAChB,EAACD,WAAW,CAACD,GAAG,CAAEG,MAAM,iBACtB;UAAA,UAAoBA;QAAM,GAAfA,MAAM;UAAA;UAAA;UAAA;QAAA,QAClB,CAAC;MAAA,GAJMD,KAAK;QAAA;QAAA;QAAA;MAAA,QAMhB;IAAC;MAAA;MAAA;MAAA;IAAA,QACE;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GA5DI1B,GAAG;AAAA,KAAHA,GAAG;AA8DT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}